# ANIMACION 1
# -*- coding: utf-8 -*-
"""
Created on Thu Apr 21 10:52:18 2016
 
@author: diegoarri91
"""
 
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import animation
 
x=np.arange(0,10,.001)
l=1.5
T=2.
 
fig=plt.figure()
ax = plt.axes(xlim=(0, 10), ylim=(-2, 2))
plt.xticks([])
plt.yticks([])
lines = [ax.plot([], [], lw=2)[0],ax.plot([], [], 'ro',markersize=20)[0]]
 
def piola(t):
    onda = np.cos(2*np.pi/l*x-2*np.pi/T*t)
    lines[0].set_data(x,onda)
    lines[1].set_data(5.,np.cos(2*np.pi/l*5.-2*np.pi/T*t))
    return lines
 
anim = animation.FuncAnimation(fig, piola, frames=np.arange(0,8.,.05),interval=30,repeat=True)
 
#Writer = animation.writers['ffmpeg']
#writer = Writer(fps=27, metadata=dict(artist='Diego'), bitrate=1800)
##
#anim.save('viajera.mp4', writer=writer)

#ANIMACION 2
# -*- coding: utf-8 -*-
"""
Created on Thu Apr 21 10:47:34 2016
 
@author: diegoarri91
"""
 
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import animation
 
def kn_fijos(n):
    return n*np.pi/L
 
def modo_fijos(x,t,n,An,*args):
    return An(n,*args)*np.sin(kn_fijos(n)*x)*np.cos(c*kn_fijos(n)*t)
 
def ej4g2(n,h,a):
    if n%2==0:
        return 0
    else:
        return 4*L*h/(np.pi**2*n**2*(L/2.-a))*(np.sin(n*np.pi/2.)-np.sin(n*np.pi*a/L))
         
x=np.arange(0,10,.001)
L=10.; c=1.
n1=1;n2=110
 
fig=plt.figure()
ax = plt.axes(xlim=(0, 10), ylim=(-1.2, 1.2))
plt.xticks([0,10],[0,'L'],fontsize=42)
plt.yticks([-1,1],['-h','h'],fontsize=42)
line = ax.plot([], [], lw=2)[0]
 
def animate(t):
    line.set_data(x,y[t])
    return line
     
tarray=np.arange(0,2*np.pi/(c*kn_fijos(1)),.075)
y=[sum([modo_fijos(x,t,n,ej4g2,1.,4.) for n in range(n1,n2+1)]) for t in tarray]
 
anim = animation.FuncAnimation(fig, animate, frames=[0]*50+range(1,len(tarray))+range(1,len(tarray))+range(1,len(tarray)),interval=42,repeat=True)

#ANIMACION 3
# -*- coding: utf-8 -*-
"""
Created on Thu Apr 21 11:25:09 2016
 
@author: diegoarri91
"""
 
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import animation
 
x=np.arange(0,10,.01)
l=2.
T=.5
 
fig=plt.figure(figsize=(18,6))
ax = plt.axes(xlim=(0, 10), ylim=(-2, 2))
plt.xticks([])
plt.yticks([])
line = ax.plot([], [], lw=2)[0]
 
def heaviside(x):
    return (np.sign(x)+1)/2
 
def animate(t):
    onda = -np.sin(2*np.pi/l*x-2*np.pi/T*t)*heaviside(l/T*t-x)+np.sin(2*np.pi/l*x+2*np.pi/T*t)*heaviside(x-10+l/T*t)
    line.set_data(x,onda)
    return line
 
anim = animation.FuncAnimation(fig, animate, frames=np.arange(0,4.,.01),interval=30,repeat=True)
 
#Writer = animation.writers['ffmpeg']
#writer = Writer(fps=24, metadata=dict(artist='Diego'), bitrate=1800)
##
#anim.save('2viajeras.mp4', writer=writer)


#ANIMACION 4 (CUERDA)
# -*- coding: utf-8 -*-
"""
Created on Wed Apr 13 21:08:05 2016
 
@author: diegoarri91
"""
 
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import animation
     
def animate(t):
    y = sum([modo_fijos(x,t/100.,n,An,*args) for n in range(n1,n2+1)])
    line.set_data(x,y)
    return line,
     
def animate2(t):
    y = sum([modo_mixtos(x,t/10.,n,An,psi0) for n in range(n1,n2+1)])
    line.set_data(x,y)
    return line,
 
def kn_fijos(n):
    #global L
    return n*np.pi/L
     
def modo_fijos(x,t,n,An,*args):
    #global c
    #return An(n,*args)*np.sin(kn_fijos(n)*x)*np.cos(c*kn_fijos(n)*t)
    return .5*An(n,*args)*np.sin(kn_fijos(n)*x-c*kn_fijos(n)*t)
     
def modo_mixtos(x,t,n,An,psi0):
    global c
    return An(n,psi0)*np.sin((2*n-1)*np.pi/(2*L)*x)*np.cos(c*(2*n-1)*np.pi/(2*L)*t)
     
def cuadrada(n,psi0):
    return 2*psi0/(n*L*kn_fc(1))*(1.-np.cos(n*np.pi))
 
def ej22(n,psi0):
    return 4*psi0/(np.pi*(2*n-1))*np.cos((2*n-1)*np.pi/8)
 
def cuadrada2(n,psi0):
    return 2*psi0/(n*L*kn_fc(1))*np.cos(n*np.pi/4)*(1.-(-1)**n)
 
#anim = animation.FuncAnimation(fig, piola, init_func=init, frames=10, interval=.01, blit=True)
#anim = animation.FuncAnimation(fig, piola, frames=np.arange(0,10,.05),interval=1000/30.)
 
 
# call our new function to display the animation
#display_animation(anim)
 
#plt.plot(x,sum([modo_mixtos(x,2*np.pi/(c*(2*n-1)*np.pi/(2*L)),n,ej22,1) for n in range(1,1000)]))
#plt.plot(x,sum([modo_fijos(x,0*np.pi/5./(c*kn_fc(1)),n,cuadrada2,1) for n in range(1,1000)]))
#plt.plot(x,sum([modo_fijos(x,0,n,ej4g2,1.,4.5) for n in range(1,1000)]))
 
#plt.plot(x,sum([modo_fijos(x,0*np.pi/5./(c*kn_fc(1)),n,cuadrada,1) for n in range(1,6)]))
#plt.ylim(-1.3,1.3)


